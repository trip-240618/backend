spring:
  application:
    name: trip
  profiles:
    active: local
    group:
      local: secret_dev, local, common
      blue: blue, secret_prod, prod, common
      green: green, secret_prod, prod, common

server:
  env: blue

---
spring:
  config:
    activate:
      on-profile: local
  jpa:
    hibernate:
      ddl-auto: update

server:
  port: 8443
  serverAddress: localhost:8443
  url: https://localhost:8443

serverName: local_server

---
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: update #실제 운영시엔 validate로 변경(db를 수정하지 않고 예외발생 ,why? 추가된 컬럼이 notnull일 경우 문제가 생김 등등)

---
#blue서버 실제 운영서버
spring:
  config:
    activate:
      on-profile: blue

server:
  port: 8080
  serverAddress: tripstory.shop #탄력적 ip >> 소셜로그인 설정을 blue green 각각 넣어줘야함
  url: https://tripstory.shop

serverName: blue_server
---
#green서버 blue 서버 버전업 중에 무중단을 위해 대신 가동될 서버
spring:
  config:
    activate:
      on-profile: green

server:
  port: 8081
  serverAddress: tripstory.shop
  url: https://tripstory.shop

serverName: green_server
---
#blue, green 공통으로 사용하는 설정값
spring:
  config:
    activate:
      on-profile: common
  jpa:
    open-in-view: false
    properties:
      hibernate:
        transaction:
          jta:
            platform: org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform


  security:
    oauth2:
      client:
        registration:
          kakao:
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: '${server.url}/user/oauth2/callback/kakao'
            client-authentication-method: POST
            scope:
              - profile_nickname
              - profile_image

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

springdoc:
  swagger-ui:
    # swagger-ui 접근 경로. default 값은 /swagger-ui.html이다.
    path: /swagger-ui.html

    # 각 API의 그룹 표시 순서
    # path, query, body, response 순으로 출력
    groups-order: DESC

    # 태그 정렬 순서.
    # alpha: 알파벳 순 정렬
    # method: OpenAPI specification file에 원하는 태그 정렬 방식 직접 기재
    tags-sorter: alpha

    # 컨트롤러 정렬 순서.
    # method는 delete - get - patch - post - put 순으로 정렬된다.
    # alpha를 사용해 알파벳 순으로 정렬할 수 있다.
    operations-sorter: method

    # swagger-ui default url인 petstore html의 비활성화 설정
    disable-swagger-default-url: true

    # swagger-ui에서 try 했을 때 request duration을 알려주는 설정
    display-request-duration: true

  # openAPI 접근 경로. default 값은 /v3/api-docs 이다.
  api-docs:
    path: /api-docs

  # Spring Actuator의 endpoint까지 보여줄 것인지?
  show-actuator: true

  # request media type 의 기본 값
  default-consumes-media-type: application/json

  # response media type 의 기본 값
  default-produces-media-type: application/json

  # 해당 패턴에 매칭되는 controller만 swagger-ui에 노출한다.
  paths-to-match:
    - /**
